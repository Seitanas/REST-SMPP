#!/usr/bin/env python

REST_SMPP_ADRESS = 'http://localhost:8000'
REST_SMPP_USER = 'test'
REST_SMPP_PASSWORD = 'test'

TOKEN_FILE = '/tmp/REST-SMMP-TOKEN'

import sys
import json
import requests
import pickle
import datetime


class SMSSender:

    def __init__(self, sender, recipient, text, token_id):

        self.sender  = sender
        self.recipient = recipient
        self.text = text
        self.token_id = token_id

    def BuildJSON(self):

        self.json_data = json.dumps({"sendsms":{'sender': self.sender, 'number': self.recipient, 'text': self.text}})

    def SendSMS(self):

        http_headers = {
            'User-Agent': 'REST-SMPP-SMS-Sender',
            'X-Auth-Token': self.token_id,
        }
        try:
            reply = requests.post(REST_SMPP_ADRESS + '/sms', verify=False, data=self.json_data, headers=http_headers)
            print (reply.text)
        except Exception, err:
            print("Error occured: %s", err)



class RESTAuthenticator:

        def CheckToken(self):

            try:
                with open(TOKEN_FILE, 'rb') as fi:
                    token_data = pickle.load(fi)
            except:
                return 0

            now = datetime.datetime.now()
            expires_at = datetime.datetime.strptime(token_data['expires_at'],'%Y-%m-%d %H:%M:%S')
            time_left = expires_at - now
            if int(time_left.total_seconds()) > 60: #if token expires in more than 60 seconds
                return token_data['id']
            else:
                return 0

        def BuildJSON(self):

            self.json_data = json.dumps({'auth':{'username': REST_SMPP_USER, 'password': REST_SMPP_PASSWORD}})

        def Authenticate(self):

            try:
                reply = requests.post(REST_SMPP_ADRESS + '/auth', verify=False, data=self.json_data)
            except Exception, err:
                print("Error occured: %s", err)
            try:
                json_data = json.loads(reply.text)
            except:
                print("Invalid JSON: %s", reply.text)
            tokenfile = TOKEN_FILE
            with open(tokenfile, 'wb') as fi:
                pickle.dump(json_data['token'], fi)
            return json_data['token']['id']

def main():
    try:
        sender = sys.argv[1]
        recipient = sys.argv[2]
        text = sys.argv[3]
    except:
        print ("Arguments missing: sms_sender SENDER RECIPIENT TEXT")

    auth = RESTAuthenticator()
    token_id = auth.CheckToken()
    if not token_id:
        auth.BuildJSON()
        token_id = auth.Authenticate()

    sms = SMSSender(sender, recipient, text, token_id)
    sms.BuildJSON()
    sms.SendSMS()

if __name__ == '__main__':
    main()
